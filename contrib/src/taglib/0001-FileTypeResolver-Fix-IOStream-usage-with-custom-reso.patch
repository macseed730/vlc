From 62fdfd554aaa68fe765afd873e225d583cd31c29 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hugo=20Beauz=C3=A9e-Luyssen?= <hugo@beauzee.fr>
Date: Wed, 9 Feb 2022 13:51:42 +0100
Subject: [PATCH] FileTypeResolver: Add a StreamTypeResolver interface

---
 taglib/fileref.cpp      | 22 ++++++++++++++++++++++
 taglib/fileref.h        | 10 ++++++++++
 taglib/toolkit/taglib.h |  2 ++
 tests/test_fileref.cpp  | 23 +++++++++++++++++++++++
 4 files changed, 57 insertions(+)

diff --git a/taglib/fileref.cpp b/taglib/fileref.cpp
index f91209a0..b71d6571 100644
--- a/taglib/fileref.cpp
+++ b/taglib/fileref.cpp
@@ -84,6 +84,22 @@ namespace
     return 0;
   }
 
+  File *detectByResolvers(IOStream* stream, bool readAudioProperties,
+                          AudioProperties::ReadStyle audioPropertiesStyle)
+  {
+    for(ResolverList::ConstIterator it = fileTypeResolvers.begin();
+        it != fileTypeResolvers.end(); ++it) {
+      if(const FileRef::StreamTypeResolver *streamResolver =
+           dynamic_cast<const FileRef::StreamTypeResolver*>(*it)) {
+        if(File *file = streamResolver->createFileFromStream(
+             stream, readAudioProperties, audioPropertiesStyle))
+          return file;
+      }
+    }
+
+    return 0;
+  }
+
   // Detect the file type based on the file extension.
 
   File* detectByExtension(IOStream *stream, bool readAudioProperties,
@@ -480,6 +496,12 @@ void FileRef::parse(FileName fileName, bool readAudioProperties,
 void FileRef::parse(IOStream *stream, bool readAudioProperties,
                     AudioProperties::ReadStyle audioPropertiesStyle)
 {
+  // Try user-defined stream resolvers.
+
+  d->file = detectByResolvers(stream, readAudioProperties, audioPropertiesStyle);
+  if(d->file)
+    return;
+
   // Try user-defined resolvers.
 
   d->file = detectByResolvers(stream->name(), readAudioProperties, audioPropertiesStyle);
diff --git a/taglib/fileref.h b/taglib/fileref.h
index 76e694e4..75d14926 100644
--- a/taglib/fileref.h
+++ b/taglib/fileref.h
@@ -108,6 +108,16 @@ namespace TagLib {
                                audioPropertiesStyle = AudioProperties::Average) const = 0;
     };
 
+    class TAGLIB_EXPORT StreamTypeResolver : public FileTypeResolver
+    {
+      TAGLIB_IGNORE_MISSING_DESTRUCTOR
+    public:
+      virtual File *createFileFromStream(IOStream *stream,
+                               bool readAudioProperties = true,
+                               AudioProperties::ReadStyle
+                               audioPropertiesStyle = AudioProperties::Average) const = 0;
+    };
+
     /*!
      * Creates a null FileRef.
      */
diff --git a/taglib/toolkit/taglib.h b/taglib/toolkit/taglib.h
index ffce61f7..2bb56994 100644
--- a/taglib/toolkit/taglib.h
+++ b/taglib/toolkit/taglib.h
@@ -54,6 +54,8 @@
 #define TAGLIB_DEPRECATED
 #endif
 
+#define VLC_PATCHED_TAGLIB_IOSTREAM_RESOLVERS
+
 #include <string>
 
 //! A namespace for all TagLib related classes and functions
diff --git a/tests/test_fileref.cpp b/tests/test_fileref.cpp
index 1fc5def9..b2631827 100644
--- a/tests/test_fileref.cpp
+++ b/tests/test_fileref.cpp
@@ -60,6 +60,20 @@ namespace
       return new Ogg::Vorbis::File(fileName);
     }
   };
+
+  class DummyStreamResolver : public FileRef::StreamTypeResolver
+  {
+  public:
+    virtual File *createFile(FileName, bool, AudioProperties::ReadStyle) const
+    {
+      return 0;
+    }
+
+    virtual File *createFileFromStream(IOStream *s, bool, AudioProperties::ReadStyle) const
+    {
+      return new MP4::File(s);
+    }
+  };
 }
 
 class TestFileRef : public CppUnit::TestFixture
@@ -387,6 +401,15 @@ public:
       FileRef f(TEST_FILE_PATH_C("xing.mp3"));
       CPPUNIT_ASSERT(dynamic_cast<Ogg::Vorbis::File *>(f.file()) != NULL);
     }
+
+    DummyStreamResolver streamResolver;
+    FileRef::addFileTypeResolver(&streamResolver);
+
+    {
+      FileStream s(TEST_FILE_PATH_C("xing.mp3"));
+      FileRef f(&s);
+      CPPUNIT_ASSERT(dynamic_cast<MP4::File *>(f.file()) != NULL);
+    }
   }
 
 };
-- 
2.34.1

